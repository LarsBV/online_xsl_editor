
var xslCompleterArr = [
'if',
'choose',
'element',
'attribute',
'text',
'value-of select="',
'sort',
'for-each-group',
'analyze-string',
'key',
'include',
'import',
'result-document',
'example-element',
'variable',
'param',
'sequence',
'template match="',
'apply-templates',
'call-template',
'document',
'processing-instruction',
'comment',
'namespace',
'for-each select="',
'apply-imports',
'next-match',
'number',
'message',
'output',
'character-map',
'import-schema',
'copy',
'copy-of',
'type',
'validation',
'when',
'version',
'otherwise',
'stylesheet',
'transform',
'exclude-result-prefixes',
'extension-element-prefixes',
'xpath-default-namespace',
'default-collation',
'use-when',
'attribute-set',
'decimal-format',
'function',
'namespace-alias',
'preserve-space',
'strip-space',
'fallback',
'exciting-new-',
'fly-to-the-moon',
'important-new-',
'is-schema-aware',
'vendor',
'with-param',
'matching-substring',
'non-matching-substring',
'perform-sort',
'inherit-namespaces',
'use-attribute-sets',
'vendor-url',
'product-name',
'product-version',
'supports-serialization',
'supports-backwards-compatibility',
'output-character',
'uri-list',
'prefix-list-or-all',
'prefix-list',
'expression',
'generic-element-type',
'versioned-element-type',
'sequence-constructor-group',
'instruction',
'result-elements',
'element-only-versioned-element-type',
'avt',
'mode',
'sequence-constructor',
'QName',
'validation-type',
'declaration',
'QNames',
'yes-or-no',
'char',
'pattern',
'sequence-type',
'prefix-or-default',
'level',
'method',
'yes-or-no-or-omit',
'nametests',
'modes',
'text-element-base-type',
'transform-element-base-type',
'validation-strip-or-preserve',
'input-type-annotations-type',
'literal-result-element',
'prefixes',
'if',
'choose',
'element',
'attribute',
'text',
'value-of',
'sort',
'for-each-group',
'analyze-string',
'key',
'include',
'import',
'result-document',
'example-element',
'variable',
'param',
'sequence',
'template',
'apply-templates',
'call-template',
'document',
'processing-instruction',
'comment',
'namespace',
'for-each',
'apply-imports',
'next-match',
'number',
'message',
'output',
'character-map',
'import-schema',
'copy',
'copy-of',
'type',
'validation',
'when',
'version',
'otherwise',
'stylesheet',
'transform',
'exclude-result-prefixes',
'extension-element-prefixes',
'xpath-default-namespace',
'default-collation',
'use-when',
'attribute-set',
'decimal-format',
'function',
'namespace-alias',
'preserve-space',
'strip-space',
'fallback',
'exciting-new-',
'fly-to-the-moon',
'important-new-',
'is-schema-aware',
'vendor',
'with-param',
'matching-substring',
'non-matching-substring',
'perform-sort',
'inherit-namespaces',
'use-attribute-sets',
'vendor-url',
'product-name',
'product-version',
'supports-serialization',
'supports-backwards-compatibility',
'output-character',
'uri-list',
'prefix-list-or-all',
'prefix-list',
'expression',
'generic-element-type',
'versioned-element-type',
'sequence-constructor-group',
'instruction',
'result-elements',
'element-only-versioned-element-type',
'avt',
'mode',
'sequence-constructor',
'QName',
'validation-type',
'declaration',
'QNames',
'yes-or-no',
'char',
'pattern',
'sequence-type',
'prefix-or-default',
'level',
'method',
'yes-or-no-or-omit',
'nametests',
'modes',
'text-element-base-type',
'transform-element-base-type',
'validation-strip-or-preserve',
'input-type-annotations-type',
'literal-result-element',
'prefixes'
];
var Range = ace.require('ace/range').Range
var xslCompleter = {
    getCompletions: function(editor, session, pos, prefix, callback) {
        var res = [];
        var index;
        if(!session.getTextRange(new Range(pos.row, pos.column, pos.row, pos.column - prefix.length - 5)).substr(0, 5) === '<xsl:')
            return callback(null, []);
        
        for (index = 0; index < xslCompleterArr.length; ++index) {
            if (xslCompleterArr[index].substring(0, prefix.length) === prefix) {
                console.log(xslCompleterArr[index]);
                res.push({name: xslCompleterArr[index], value: xslCompleterArr[index], score: 999999, meta: 'xsl'});
            }
        }

        callback(null, res);
    }
}